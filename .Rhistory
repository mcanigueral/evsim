)
connections %>% plot_ts()
library(dplyr)
sessions <- head(evsim::california_ev_sessions, 100)
connections <- get_n_connections(
sessions,
by = "ChargingStation",
resolution = 60,
align_time = TRUE
)
connections %>% plot_ts()
sessions <- head(evsim::california_ev_sessions_profiles, 100)
dttm_seq <- seq.POSIXt(
as_datetime(dmy(01102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(07102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
library(lubridate)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
dttm_seq <- seq.POSIXt(
as_datetime(dmy(01102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(07102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = "Profile",
resolution = 15,
align_time = TRUE
)
connections %>% plot_ts()
sessions
dttm_seq
connections
sessions
sessions <- head(evsim::california_ev_sessions_profiles, 100)
dttm_seq <- seq.POSIXt(
as_datetime(dmy(08102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(11102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = "Profile",
align_time = TRUE
)
connections %>% plot_ts()
sessions <- head(evsim::california_ev_sessions_profiles, 100)
sessions <- head(evsim::california_ev_sessions_profiles, 100) %>%
mutate(Profile = "all")
sessions <- head(evsim::california_ev_sessions_profiles, 100) %>%
mutate(Profile = "all")
connections <- get_n_connections(
sessions,
by = "Profile",
resolution = 15,
align_time = TRUE
)
sessions <- head(evsim::california_ev_sessions, 100) %>%
mutate(Profile = "all")
connections <- get_n_connections(
sessions,
by = "Profile",
resolution = 15,
align_time = TRUE
)
connections %>% plot_ts()
connections
connections %>%
group_by(n_connections = all) %>%
summarise(n = n())
connections %>%
group_by(n_connections = all) %>%
summarise(n = n()) %>%
arrange(desc(n_connections))
connections %>%
group_by(n_connections = all) %>%
summarise(n = n())
connections %>%
group_by(n_connections = all) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
connections_summary <- connections %>%
group_by(n_connections = all) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
library(ggplot2)
connections_summary %>%
ggplot(aes(n_connections, pct)) +
geom_line() +
labs(x = "Number of connections", y = "Share of time (%)")
get_percentage_hours <- function(vct, threshold) {
sum(vct > threshold)/length(vct)*100
}
connections_curve <- tibble(
n_connections = seq(min(connections$all), max(connections$all)),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(connections$al, .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = min(n_connections)) # Just one value of kW per percentage
library(purrr)
connections_curve <- tibble(
n_connections = seq(min(connections$all), max(connections$all)),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(connections$al, .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = min(n_connections)) # Just one value of kW per percentage
warnings()
connections_curve <- tibble(
n_connections = seq(min(connections$all), max(connections$all)),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(connections$all, .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = min(n_connections)) # Just one value of kW per percentage
connections_summary %>%
ggplot(aes(n_connections, pct)) +
geom_line() +
labs(x = "Number of connections", y = "Share of time (%)")
connections_curve %>%
ggplot(aes(n_connections, pct)) +
geom_line() +
labs(x = "Number of connections", y = "Share of time (%)")
connections_curve %>%
ggplot(aes(pct, n_connections)) +
geom_line() +
labs(x = "Number of connections", y = "Share of time (%)")
connections_curve %>%
ggplot(aes(n_connections, pct)) +
geom_line() +
labs(x = "Number of connections", y = "Share of time (%)")
library(tidyr)
connections_curve <- tibble(
n_connections = seq(min(connections$all), max(connections$all)),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(connections$all, .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = max(n_connections)) # Just one value of kW per percentage
connections_curve %>%
ggplot(aes(n_connections, pct)) +
geom_line() +
labs(x = "Number of connections", y = "Share of time (%)")
connections_curve %>%
ggplot(aes(pct, n_connections)) +
geom_line() +
labs(x = "Number of connections", y = "Share of time (%)")
connections_curve %>%
ggplot(aes(pct, n_connections)) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
connections_curve <- tibble(
n_connections = seq(min(connections$all), max(connections$all)),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(connections$all, .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = min(n_connections)) # Just one value of kW per percentage
connections_curve %>%
ggplot(aes(pct, n_connections)) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
#'   by = "15 mins"
#' )
#' connections <- get_n_connections(
#'   sessions,
#'   dttm_seq = dttm_seq,
#'   by = "Profile",
#'   align_time = TRUE
#' )
#' connections %>% plot_ts()
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
for (profile in unique(sessions[[by]])) {
}
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ tibble(
n_connections = seq(min(connections[[.x]]), max(connections[[.x]])),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(connections[[.x]], .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = min(n_connections)) # Just one value of kW per percentage
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes_string(x = "pct", y = "n_connections", color = by, group = by)) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
}
plot_connections_duration_curve(align_time = TRUE)
sessions <- head(evsim::california_ev_sessions, 100)
sessions <- head(evsim::california_ev_sessions, 100)
sessions
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_connections_duration_curve(sessions, align_time = TRUE)
#'   by = "15 mins"
#' )
#' connections <- get_n_connections(
#'   sessions,
#'   dttm_seq = dttm_seq,
#'   by = "Profile",
#'   align_time = TRUE
#' )
#' connections %>% plot_ts()
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ tibble(
n_connections = seq(min(connections[[.x]]), max(connections[[.x]])),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(connections[[.x]], .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = min(n_connections)) # Just one value of kW per percentage
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes_string(x = "pct", y = "n_connections", color = by, group = by)) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
}
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_connections_duration_curve(sessions, align_time = TRUE)
get_connection_curve_data <- function(vct) {
tibble(
n_connections = seq(min(vct), max(vct)),
pct = round(map_dbl(.data$n_connections, ~get_percentage_hours(vct, .x)), 2)
) %>%
group_by(pct) %>%
summarise(n_connections = min(n_connections)) # Just one value of kW per percentage
}
#'   by = "15 mins"
#' )
#' connections <- get_n_connections(
#'   sessions,
#'   dttm_seq = dttm_seq,
#'   by = "Profile",
#'   align_time = TRUE
#' )
#' connections %>% plot_ts()
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ get_connection_curve_data(connections[[.x]])
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes_string(x = "pct", y = "n_connections", color = by, group = by)) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
}
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_connections_duration_curve(sessions, align_time = TRUE)
vignette("ggplot2-in-packages")
#'   by = "15 mins"
#' )
#' connections <- get_n_connections(
#'   sessions,
#'   dttm_seq = dttm_seq,
#'   by = "Profile",
#'   align_time = TRUE
#' )
#' connections %>% plot_ts()
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ get_connection_curve_data(connections[[.x]])
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes(x = .data$pct, y = .data$n_connections, color = .data[[by]], group = .data[[by]])) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
}
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_connections_duration_curve(sessions, align_time = TRUE)
sessions <- head(evsim::california_ev_sessions_profiles, 1000)
plot_connections_duration_curve(sessions, align_time = TRUE)
connections
get_connection_curve_data(connections)
get_connection_curve_data(connections$all)
get_connection_curve_data(connections$all) %>% summary
min(connecctions$all)
min(connections$all)
connections$all > 0 %>% sum
connections$all
get_percentage_hours <- function(vct, threshold) {
sum(vct >= threshold)/length(vct)*100
}
get_connection_curve_data <- function(vct) {
dplyr::tibble(
n_connections = seq(min(vct), max(vct)),
pct = round(purrr::map_dbl(.data$n_connections, ~ get_percentage_hours(vct, .x)), 2)
) %>%
dplyr::group_by(.data$pct) %>%
dplyr::summarise(n_connections = min(.data$n_connections)) # Just one value of kW per percentage
}
#' @importFrom dplyr tibble sym select_if group_by summarise arrange right_join distinct filter between
#' @importFrom ggplot2
#'
#' @examples
#' library(lubridate)
#' library(dplyr)
#'
#' sessions <- head(evsim::california_ev_sessions_profiles, 100)
#' plot_connections_duration_curve(sessions, align_time = TRUE)
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ get_connection_curve_data(connections[[.x]])
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes(x = .data$pct, y = .data$n_connections, color = .data[[by]], group = .data[[by]])) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
}
plot_connections_duration_curve(sessions, align_time = TRUE)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_connections_duration_curve(sessions, align_time = TRUE)
plot_connections_duration_curve(sessions, align_time = TRUE)
sessions <- head(evsim::california_ev_sessions_profiles, 100) %>%
mutate(Profile = "All")
plot_connections_duration_curve(sessions, by = "Profile", align_time = TRUE)
connections
connection
library(testthat)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
#' library(dplyr)
#'
#' sessions <- head(evsim::california_ev_sessions_profiles, 100)
#' plot_connections_duration_curve(
#'   sessions,
#'   by = "Profile",
#'   resolution = 15,
#'   align_time = TRUE
#' )
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ get_connection_curve_data(connections[[.x]])
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes(x = .data$pct, y = .data$n_connections, color = .data[[by]], group = .data[[by]])) +
geom_line() +
labs(y = "Minimum number of connections", x = "Share of time (%)")
}
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
library(purrr)
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
get_connection_curve_data <- function(vct) {
dplyr::tibble(
n_connections = seq(min(vct), max(vct)),
pct = round(purrr::map_dbl(.data$n_connections, ~ sum(vct >= .x)/length(vct)*100), 2)
) %>%
dplyr::group_by(.data$pct) %>%
dplyr::summarise(n_connections = min(.data$n_connections)) # Just one value of kW per percentage
}
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
library(ggplot2)
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
)
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
)
test_that("plot of connections duration curve works", {
expect_true(ggplot2::is.ggplot(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
)
))
})
pkgdown::build_site()
pkgdown::build_site()
head(evsim::california_ev_sessions_profiles, 50) %>% get_demand() %>% dygraph()
library(dygraphs)
head(evsim::california_ev_sessions_profiles, 50) %>% get_demand() %>% dygraph()
head(evsim::california_ev_sessions_profiles, 50)
head(evsim::california_ev_sessions_profiles, 50) %>% get_demand(align_time = T) %>% dygraph()
usethis::use_version()
pkgdown::build_site()
pkgdown::build_site()
library(evsim)
pkgdown::build_site()
devtools::release()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
