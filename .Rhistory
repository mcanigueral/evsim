get_demand(
evsim::california_ev_sessions[seq_len(100), ],
by = "Session",
resolution = 60
)
head(evsim::california_ev_sessions, 100)
devtools::check_win_devel()
library(evsim)
library(lubridate)
library(dplyr)
# Get occupancy with the complete datetime sequence from the sessions
sessions <- head(evsim::california_ev_sessions, 100)
get_n_connections(
sessions,
by = "Session",
resolution = 60
)
# Get occupancy with a custom datetime sequence and resolution of 15 minutes
sessions <- head(evsim::california_ev_sessions_profiles, 100)
dttm_seq <- seq.POSIXt(
as_datetime(dmy(01102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(07102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = "Profile",
resolution = 15
)
sessions_infrastructure <- add_charging_infrastructure(
head(evsim::california_ev_sessions, 100), connections_th = 0
)
print(unique(sessions_infrastructure$ChargingStation))
sessions_infrastructure <- add_charging_infrastructure(
head(evsim::california_ev_sessions, 100), resolution = 60, connections_th = 0
)
print(unique(sessions_infrastructure$ChargingStation))
library(evsim)
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 100),
resolution = 60, connections_th = 0
)
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, connections_th = 0
)
devtools::check_win_devel()
evsim::california_ev_model$models$user_profiles[[1]]
evsim::california_ev_model$models$user_profiles[[1]]$energy_models
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
ev_model <- evsim::california_ev_model
test_that("simulation works with charging rates that don't have an energy model", {
# Modify to assume that energy models from Worktime sessions are for 11 kW
ev_model$models$user_profiles[[1]]$energy_models[[2]]$charging_rate <- 11
simulated_sessions <- simulate_sessions(
ev_model,
sessions_day = tibble(
time_cycle = c("Workday", "Weekend"),
n_sessions = c(15, 10)
),
user_profiles = tibble(
time_cycle = c("Workday", "Workday", "Weekend"),
profile = c("Visit", "Worktime", "Visit"),
ratio = c(0.5, 0.5, 1),
power = c(3.7, 22, 3.7) # 22kW is not in the models, but 11kW models are used
),
charging_powers = tibble(
power = c(3.7, 11),
ratio = c(0.3, 0.7)
),
dates = seq.Date(today(), today()+days(4), length.out = 4),
resolution = 15
)
expect_true(nrow(simulated_sessions) > 0)
})
test_that("simulation works with some user profiles without sessions per day", {
simulated_sessions <- simulate_sessions(
ev_model,
sessions_day = tibble(
time_cycle = c("Workday", "Weekend"),
n_sessions = c(15, 0) # No weekend sessions
),
user_profiles = tibble(
time_cycle = c("Workday", "Workday", "Weekend"),
profile = c("Visit", "Worktime", "Visit"),
ratio = c(0.5, 0.5, 1),
power = c(3.7, 22, 3.7) # 22kW is not in the models, but 11kW models are used
),
charging_powers = tibble(
power = c(3.7, 11),
ratio = c(0.3, 0.7)
),
dates = seq.Date(today(), today()+days(4), length.out = 4),
resolution = 15
)
expect_true(nrow(simulated_sessions) > 0)
})
simulated_sessions
test_that("simulation is skipped if no sessions per day are configured", {
simulated_sessions <- simulate_sessions(
ev_model,
sessions_day = tibble(
time_cycle = c("Workday", "Weekend"),
n_sessions = c(0, 0) # No sessions to simulate
),
user_profiles = tibble(
time_cycle = c("Workday", "Workday", "Weekend"),
profile = c("Visit", "Worktime", "Visit"),
ratio = c(0.5, 0.5, 1),
power = c(3.7, 22, 3.7) # 22kW is not in the models, but 11kW models are used
),
charging_powers = tibble(
power = c(3.7, 11),
ratio = c(0.3, 0.7)
),
dates = seq.Date(today(), today()+days(4), length.out = 4),
resolution = 15
)
expect_true(nrow(simulated_sessions) > 0)
})
test_that("simulation is skipped if no sessions per day are configured", {
simulated_sessions <- simulate_sessions(
ev_model,
sessions_day = tibble(
time_cycle = c("Workday", "Weekend"),
n_sessions = c(0, 0) # No sessions to simulate
),
user_profiles = tibble(
time_cycle = c("Workday", "Workday", "Weekend"),
profile = c("Visit", "Worktime", "Visit"),
ratio = c(0.5, 0.5, 1),
power = c(3.7, 22, 3.7) # 22kW is not in the models, but 11kW models are used
),
charging_powers = tibble(
power = c(3.7, 11),
ratio = c(0.3, 0.7)
),
dates = seq.Date(today(), today()+days(4), length.out = 4),
resolution = 15
)
expect_true(nrow(simulated_sessions) == 0)
})
pkgdown::build_site()
devtools::check_rhub()
get_charging_rates_distribution(evsim::california_sessions)
get_charging_rates_distribution(evsim::california_ev_sessions)
?lubridate::floor_date
#' @export
#'
#' @importFrom dplyr %>% select mutate filter group_by ungroup summarise n all_of
#' @importFrom lubridate floor_date
#' @importFrom rlang .data
#'
#' @examples
#' get_charging_rates_distribution(evsim::california_ev_sessions, unit = "year)
#'
#'
get_charging_rates_distribution <- function(sessions, unit="year") {
sessions_power_round <- sessions %>%
select(all_of(c("ConnectionStartDateTime", "Power"))) %>%
mutate(
power = round_to_interval(.data$Power, 3.7)
) %>%
filter(.data$power > 0)
sessions_power_round$power[sessions_power_round$power >= 11] <- 11
sessions_power_round %>%
group_by(
datetime = floor_date(.data$ConnectionStartDateTime, unit = unit),
power = .data$power
) %>%
summarise(n = n()) %>%
ungroup() %>%
group_by(.data$datetime) %>%
mutate(
ratio = .data$n/sum(.data$n)
) %>%
ungroup()
}
get_charging_rates_distribution(evsim::california_ev_sessions)
devtools::load_all(".")
source("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evsim/R/simulation.R", echo=TRUE)
devtools::load_all(".")
devtools::load_all(".")
get_charging_rates_distribution(evsim::california_ev_sessions, unit = "year)
get_charging_rates_distribution(evsim::california_ev_sessions, unit = "year")
pkgdown::build_site()
devtools::release()
pkgdown::build_reference()
devtools::release()
devtools::release()
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
evsim::california_ev_sessions
evsim::california_ev_sessions %>%
slice_n(10000)
evsim::california_ev_sessions %>%
sample_n(10000)
library(evsim)
library(evsim)
library(dplyr)
library(lubridate)
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 4)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(1000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 4)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(1000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 1)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 1)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 4)
dutils::toc()
detectCores(logical = F)
parallel::detectCores(logical = F)
library(evsim)
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 4)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 1)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 6)
dutils::toc()
library(evsim)
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 1)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 6)
dutils::toc()
results
parallel::detectCores(logical = F)
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 4)
dutils::toc()
dutils::tic()
results <- evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 5)
dutils::toc()
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 1)
)
results[3]
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 4)
)
results[3]
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6),
time = 0
)
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6),
time = 0
)
for (mcc in c(1, 2, 3, 4, 5, 6)) {
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = 1)
)
cores_time$time[mcc] <- results[3]
}
as.numeric(results[3])
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6),
time = 0
)
for (mcc in c(1, 2, 3, 4, 5, 6)) {
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = mcc)
)
cores_time$time[mcc] <- as.numeric(results[3])
}
plot(cores_time)
cores_time %>%
ggplot2::ggplot(x = cores, y = time) +
ggplot2::geom_line()
library(ggplot2)
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line()
?parallel::detectCores
parallel::detectCores()
library(evsim)
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6, 7, 8),
time = 0
)
for (mcc in cores_time$cores) {
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = mcc)
)
cores_time$time[mcc] <- as.numeric(results[3])
}
library(ggplot2)
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
devtools::load_all() # load evsim
library(dplyr)
library(lubridate)
library(dutils)
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6, 7, 8),
time = 0
)
for (mcc in cores_time$cores) {
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = mcc)
)
cores_time$time[mcc] <- as.numeric(results[3])
}
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line(size = 2)
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line(linewidth = 2)
cores_time
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6, 7, 8),
time = 0
)
for (mcc in cores_time$cores) {
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = mcc)
)
cores_time$time[mcc] <- as.numeric(results[3])
}
library(ggplot2)
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line(linewidth = 2)
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line(linewidth = 1.2)
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line(linewidth = 1.2) +
labs(x = "Number of cores", y = "Computation time")
cores_time %>%
ggplot2::ggplot(aes(x = cores, y = time)) +
ggplot2::geom_line(linewidth = 1.2) +
labs(x = "Number of cores", y = "Computation time (seconds)")
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
devtools::load_all() # load evsim
library(dplyr)
library(lubridate)
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6, 7, 8),
time = 0
)
for (mcc in cores_time$cores) {
results <- system.time(evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = mcc)
)
cores_time$time[mcc] <- as.numeric(results[3])
}
parallel::detectCores(logical = FALSE)
parallel::detectCores(logical = TRUE)
parallel::detectCores(logical = TRUE)
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6, 7, 8),
time = 0
)
for (mcc in cores_time$cores) {
results <- system.time(
evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = mcc)
)
cores_time$time[mcc] <- as.numeric(results[3])
}
library(evsim)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
devtools::load_all() # load evsim
library(dplyr)
library(lubridate)
parallel::detectCores(logical = FALSE)
cores_time <- tibble(
cores = c(1, 2, 3, 4, 5, 6, 7, 8),
time = 0
)
for (mcc in cores_time$cores) {
results <- system.time(
evsim::california_ev_sessions %>%
sample_n(10000) %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 60, mc.cores = mcc)
)
cores_time$time[mcc] <- as.numeric(results[3])
}
library(ggplot2)
cores_time %>%
ggplot(aes(x = cores, y = time)) +
geom_col() +
labs(x = "Number of cores", y = "Computation time (seconds)")
saveRDS(cores_time. "cores_time.RDS")
saveRDS(cores_time, "cores_time.RDS")
Sys.info()
.Platform
california_ev_model <- evprof::read_ev_model(
'data-raw/california_evmodel.json'
)
california_ev_model$models$user_profiles[[1]]$energy_models
usethis::use_data(california_ev_model, overwrite = TRUE)
library(evsim)
evsim::california_ev_model$models$user_profiles[[1]]$energy_models
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
ev_model <- evsim::california_ev_model
ev_model$models
ev_model
simulated_sessions <- simulate_sessions(
ev_model,
sessions_day = tibble(
time_cycle = c("Workday", "Weekend"),
n_sessions = c(15, 10)
),
user_profiles = tibble(
time_cycle = c("Workday", "Workday", "Weekend"),
profile = c("Visit", "Worktime", "Visit"),
ratio = c(0.5, 0.5, 1)
),
charging_powers = tibble(
power = c(3.7, 11),
ratio = c(0.3, 0.7)
),
dates = seq.Date(today(), today()+days(4), length.out = 4),
resolution = 15
)
expect_true(nrow(simulated_sessions) > 0)
simulated_sessions
usethis::use_version()
