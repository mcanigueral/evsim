install.packages('data.table')
install.packages('dtplyr')
install.packages(c("shinydashboard", "shinyWidgets", "spelling"))
devtools::load_all()
library(dplyr)
library(evsim)
library(evsim)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
new_ratios <- tibble(
time_cycle = rep('Workday', 2),
profile = workday_models$profile,
ratio = c(0.2, 0.8)
)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
new_ratios <- tibble(
time_cycle = rep('Workday', 2),
profile = workday_models$profile,
ratio = c(0.2, 0.8)
)
new_ratios
tt <- tibble(a = 1)
tt[["a"]][FALSE]
tt <- tibble(a = "a")
tt[["a"]][FALSE]
tt[["a"]][FALSE][[1]]
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1)
)
user_profiles
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
new_ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated <- simulate_sessions(
new_ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_day
user_profiles
charging_powers
library(evsim)
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
#' If `power` is `NA` then it is simulated according to the ratios of parameter `charging_powers` in function. `simulate_sessions`.
#'
#' @details If any user profile is not in the `new_ratios` data frame, its corresponding ratio in the `evmodel` object is updated with a `0`
#'
#' @return the updated `evmodel` object
#' @export
#'
#' @importFrom dplyr left_join select %>%
#' @importFrom tidyr nest
#'
prepare_model <- function(evmodel, sessions_day, user_profiles) {
if (!('power' %in% colnames(user_profiles))) {
user_profiles['power'] <- NA
}
ev_model <- user_profiles %>%
select('time_cycle', 'profile', 'ratio', 'power') %>%
nest(.by = 'time_cycle', .key = 'user_profiles') %>%
left_join(
select(evmodel, 'time_cycle', 'months', 'wdays'),
by = 'time_cycle'
) %>%
left_join(
sessions_day,
by = 'time_cycle'
)
for (m in 1:nrow(ev_model)) {
time_cycle_name <- ev_model$time_cycle[[m]]
if (!(time_cycle_name %in% evmodel$time_cycle)) {
message(paste("Error: Time cycle", time_cycle_name, "does not exist"))
return(NULL)
}
evmodel_idx <- which(time_cycle_name == evmodel$time_cycle)
gmm <- left_join(
ev_model$user_profiles[[m]],
evmodel$user_profiles[[evmodel_idx]] %>%
select('profile', 'connection_models', 'energy_models'),
by = 'profile'
)
ev_model[["user_profiles"]][[m]] <- gmm
}
return(ev_model)
}
library(evsim)
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated
sessions_estimated %>% filter(Profile == "Visit") %>% group_by(Power) %>% summarise(n = n())
sessions_estimated %>% filter(Profile == "Visit") %>% group_by(Power) %>% summarise(n = n()) %>% mutate(pct = n/sum(n))
sessions_estimated %>% filter(Profile == "Visit") %>% group_by(Power) %>% summarise(n = n()) %>% mutate(pct = n/sum(n)*100)
workday_models$energy_models
workday_models$energy_models[[1]]
workday_models
workday_models$energy_models[[1]] # Visit profile energy models
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
new_ev_model$metadata$tzone
)
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
ev_model$metadata$tzone
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday'),
profile = c('Visit', 'Worktime'),
ratio = c(0.2, 0.8),
power = c(NA, 11)
)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
ev_model$metadata$tzone
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated %>%
filter(Profile == "Worktime") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
0.2*20
sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = n_sessions_objective,
prob = (0.2, 0.4, 0.4), replace = T
sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = n_sessions_objective,
prob = c(0.2, 0.4, 0.4), replace = T
)[["power"]]
sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = 20,
prob = c(0.2, 0.4, 0.4), replace = T
)[["power"]]
pp <- sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = 20,
prob = c(0.2, 0.4, 0.4), replace = T
)[["power"]]
tibble(Power = pp) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac(
+     tibble(power = c(3.7, 7.4, 11)), size = 20,
+     prob = c(0.2, 0.4, 0.4), replace = T
tibble(Power = sample_frac(
+     tibble(power = c(3.7, 7.4, 11)), size = 20,
+     prob = c(0.2, 0.4, 0.4), replace = T
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04))
sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 100, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 1000, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 10000, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 100, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 100range(1, 40, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
range(1, 2)
range(1, 5)
range(4)
?range
?range
library(evsim)
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
workday_models$energy_models[[1]] # Visit profile energy models
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
workday_models$energy_models[[1]] # Visit profile energy models
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
power_bags <- map(
charging_powers$ratio,
~ ceiling(.x*n_sessions_objective)
)
library(purrr)
power_bags <- map(
charging_powers$ratio,
~ ceiling(.x*n_sessions_objective)
)
n_sessions_objective <- 20
power_bags <- map(
charging_powers$ratio,
~ ceiling(.x*n_sessions_objective)
)
power_bags
random_idxs <- sample(
1:nrow(charging_powers),
size = 1000,
prob = charging_powers$ratio,
replace = T
)
random_idxs
estimated_power <- c()
for (i in seq(1, n_sessions_objective)) {
power_valid <- FALSE
while (!power_valid) {
power_idx <- sample(random_idxs, 1)
if (power_bags[[power_idx]] > 0) {
power_valid <- TRUE
}
}
estimated_power <- c(estimated_power, charging_powers$power[power_idx])
power_bags[[power_idx]] <- power_bags[[power_idx]] - 1
}
estimated_power
tibble(Power = estimated_power) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
