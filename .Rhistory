#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ get_connection_curve_data(connections[[.x]])
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes(x = .data$pct, y = .data$n_connections, color = .data[[by]], group = .data[[by]])) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
}
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_connections_duration_curve(sessions, align_time = TRUE)
sessions <- head(evsim::california_ev_sessions_profiles, 1000)
plot_connections_duration_curve(sessions, align_time = TRUE)
connections
get_connection_curve_data(connections)
get_connection_curve_data(connections$all)
get_connection_curve_data(connections$all) %>% summary
min(connecctions$all)
min(connections$all)
connections$all > 0 %>% sum
connections$all
get_percentage_hours <- function(vct, threshold) {
sum(vct >= threshold)/length(vct)*100
}
get_connection_curve_data <- function(vct) {
dplyr::tibble(
n_connections = seq(min(vct), max(vct)),
pct = round(purrr::map_dbl(.data$n_connections, ~ get_percentage_hours(vct, .x)), 2)
) %>%
dplyr::group_by(.data$pct) %>%
dplyr::summarise(n_connections = min(.data$n_connections)) # Just one value of kW per percentage
}
#' @importFrom dplyr tibble sym select_if group_by summarise arrange right_join distinct filter between
#' @importFrom ggplot2
#'
#' @examples
#' library(lubridate)
#' library(dplyr)
#'
#' sessions <- head(evsim::california_ev_sessions_profiles, 100)
#' plot_connections_duration_curve(sessions, align_time = TRUE)
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ get_connection_curve_data(connections[[.x]])
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes(x = .data$pct, y = .data$n_connections, color = .data[[by]], group = .data[[by]])) +
geom_line() +
labs(y = "Number of connections", x = "Share of time (%)")
}
plot_connections_duration_curve(sessions, align_time = TRUE)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_connections_duration_curve(sessions, align_time = TRUE)
plot_connections_duration_curve(sessions, align_time = TRUE)
sessions <- head(evsim::california_ev_sessions_profiles, 100) %>%
mutate(Profile = "All")
plot_connections_duration_curve(sessions, by = "Profile", align_time = TRUE)
connections
connection
library(testthat)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
#' library(dplyr)
#'
#' sessions <- head(evsim::california_ev_sessions_profiles, 100)
#' plot_connections_duration_curve(
#'   sessions,
#'   by = "Profile",
#'   resolution = 15,
#'   align_time = TRUE
#' )
#'
plot_connections_duration_curve <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, align_time = FALSE, mc.cores = 1) {
connections <- get_n_connections(
sessions,
dttm_seq = dttm_seq,
by = by,
resolution = resolution,
align_time = align_time,
mc.cores = mc.cores
)
connections_curves <- map(
unique(sessions[[by]]) %>% set_names(),
~ get_connection_curve_data(connections[[.x]])
) %>%
list_rbind(names_to = by)
connections_curves %>%
ggplot(aes(x = .data$pct, y = .data$n_connections, color = .data[[by]], group = .data[[by]])) +
geom_line() +
labs(y = "Minimum number of connections", x = "Share of time (%)")
}
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
library(purrr)
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
get_connection_curve_data <- function(vct) {
dplyr::tibble(
n_connections = seq(min(vct), max(vct)),
pct = round(purrr::map_dbl(.data$n_connections, ~ sum(vct >= .x)/length(vct)*100), 2)
) %>%
dplyr::group_by(.data$pct) %>%
dplyr::summarise(n_connections = min(.data$n_connections)) # Just one value of kW per percentage
}
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
library(ggplot2)
test_that("plot of connections duration curve works", {
expect_type(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
),
"ggplot"
)
})
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
)
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
)
test_that("plot of connections duration curve works", {
expect_true(ggplot2::is.ggplot(
plot_connections_duration_curve(
sessions %>% mutate(Profile = "all"),
by = "Profile",
resolution = 15,
align_time = TRUE
)
))
})
pkgdown::build_site()
pkgdown::build_site()
head(evsim::california_ev_sessions_profiles, 50) %>% get_demand() %>% dygraph()
library(dygraphs)
head(evsim::california_ev_sessions_profiles, 50) %>% get_demand() %>% dygraph()
head(evsim::california_ev_sessions_profiles, 50)
head(evsim::california_ev_sessions_profiles, 50) %>% get_demand(align_time = T) %>% dygraph()
usethis::use_version()
pkgdown::build_site()
pkgdown::build_site()
library(evsim)
pkgdown::build_site()
devtools::release()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::release()
library(evsim)
library(evsim)
plot_occupancy_duration_curve(evsim::california_ev_sessions_profiles %>% mutate(Profile = "All"))
library(dplyr)
plot_occupancy_duration_curve(evsim::california_ev_sessions_profiles %>% mutate(Profile = "All"))
evsim::california_ev_sessions_profiles %>% mutate(Profile = "All") %>% filter(year(ConnectionStartDateTime)< 2020) %>% plot_occupancy_duration_curve(resolution = 60)
library(lubridate)
evsim::california_ev_sessions_profiles %>% mutate(Profile = "All") %>% filter(year(ConnectionStartDateTime)< 2020) %>% plot_occupancy_duration_curve(resolution = 60)
evsim::california_ev_sessions_profiles %>% mutate(Profile = "All") %>% filter(year(ConnectionStartDateTime) == 2019) %>% plot_occupancy_duration_curve(resolution = 60, mc.cores = 4)
evsim::california_ev_sessions_profiles %>% mutate(Profile = "All") %>% filter(year(ConnectionStartDateTime) < 2020) %>% plot_occupancy_duration_curve(resolution = 60, mc.cores = 4)
evsim::california_ev_sessions_profiles %>% mutate(Profile = "All") %>% filter(year(ConnectionStartDateTime) == 2019) %>% plot_occupancy_duration_curve(resolution = 30, mc.cores = 4)
library(evsim)
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
# Get the example `evmodel` and `sessions` included in the package
ev_model <- evsim::california_ev_model
temp_dir <- tempdir()
# For workdays time cycle
workdays_parameters <- dplyr::tibble(
profile = c("Worktime", "Visit"),
ratio = c(80, 20),
start_mean = c(9, 11),
start_sd = c(1, 4),
duration_mean = c(8, 4),
duration_sd = c(0.5, 2),
energy_mean = c(15, 6),
energy_sd = c(4, 3)
)
# For weekends time cycle
weekends_parameters <- dplyr::tibble(
profile = "Visit",
ratio = 100,
start_mean = 12,
start_sd = 4,
duration_mean = 3,
duration_sd = 2,
energy_mean = 4,
energy_sd = 4
)
parameters_lst <- list(workdays_parameters, weekends_parameters)
parameters_lst
# Get the whole model
ev_model <- get_custom_ev_model(
names = c("Workdays", "Weekends"),
months_lst = list(1:12, 1:12),
wdays_lst = list(1:5, 6:7),
parameters_lst,
connection_log = FALSE,
energy_log = FALSE,
data_tz = "Europe/Amsterdam"
)
ev_model
ev_model$models
ev_model$models$user_profiles
ev_model$models$user_profiles[[1]]$connection_models
ev_model$models$user_profiles[[1]]$connection_models[[1]]$sigma
get_charging_rates_distribution(evsim::california_ev_sessions, unit = "year")
dyplot
library(dutils)
dyplot
format_dygraph
library(evsim)
library(evsim)
library(evsim)
devtools::check_win_devel()
devtools::release()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
library(evsim)
library(dplyr)
library(lubridate)
evmodel_custom
pkgdown::build_article("vignettes/custom_evmodel.Rmd")
pkgdown::build_article("custom_evmodel.Rmd")
pkgdown::build_article("custom_evmodel")
pkgdown::preview_page('articles/custom_evmodel.html')
pkgdown::build_article("custom_evmodel")
pkgdown::build_article("custom_evmodel")
?mlapply
seq(12, 0, 15/60)
seq(from = 12, to = 0, by= 15/60)
seq(from = 12, to = 0, by= -15/60)
library(evsim)
12.9/0.25
seq(from = 12.9, length.out = ceiling(12.9*60/resolution), by= -15/60)
seq(from = 12.9, length.out = ceiling(12.9*60/15), by= -15/60)
0.15*60
install.packages("spelling")
library(evsim)
library(evsim)
library(evsim)
sessions
library(evsim)
california_ev_sessions
california_ev_sessions %>% adapt_charging_features(time_resolution = 15)
librayr(dplyr)
library(dplyr)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% pull(ConnectionStartDateTime) %>% lubridate::as.interval()
library(lubridate)
csdt <- california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% pull(ConnectionStartDateTime)
csdt - lag(csdt)
unique((csdt - lag(csdt))/15
unique(csdt - lag(csdt))
minutes(csdt)
minute(csdt)
unique(minute(csdt))
unique(minute(csdt))/15
unique(minute(csdt))%%15
sum(unique(minute(csdt))%%15)
california_ev_sessions %>% is_aligned
is_aligned <- function(sessions, resolution) {
connection_start_dt <- sessions$ConnectionStartDateTime
if (sum(unique(lubridate::minute(connection_start_dt)) %% resolution) == 0) {
return( TRUE )
} else {
return( FALSE )
}
}
california_ev_sessions %>% is_aligned
california_ev_sessions %>% is_aligned(15)
csdt <- california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% is_aligned(15)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% is_aligned(15)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% is_aligned(60)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
sample(c(1, 2, 3), 1)
sample(c(1, 2, 3), 2)
sample(c(1, 2, 3), 5)
sample(c(1, 2, 3), 5, replace = T)
log(1)
log(1)
library(evsim)
library(evsim)
slice_sample(tibble(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
library(dplyr)
slice_sample(tibble(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
slice_sample(data.frame(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
log(0)
exp(-4)
exp(1)
log(0.5)
log(1)
slice_sample(data.frame(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
slice_sample(data.frame(a = c(1, 2, 3), b = c(4, 5, 6)), n = 5, replace = TRUE)
usethis::edit_r_environ()
library(evsim)
library(evsim)
library(evsim)
c(1, 2, 3)[c(1, 2, 3) > 4]
length(c(1, 2, 3)[c(1, 2, 3) > 4])
library(evsim)
library(evsim)
devtools::load_all(".")
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60
)
print(unique(sessions_infrastructure$ChargingStation))
View(sessions_infrastructure)
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60,
)
print(unique(sessions_infrastructure$ChargingStation))
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, n_sockets = 4
)
print(unique(sessions_infrastructure$ChargingStation))
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, n_sockets = 3
)
print(unique(sessions_infrastructure$ChargingStation))
# Now without considering the occupancy values that only represent
# a 10% of the time
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, duration_th = 10, n_sockets = 3
)
print(unique(sessions_infrastructure$ChargingStation))
# Now without considering the occupancy values that only represent
# a 10% of the time
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, duration_th = 10, n_sockets = 4
)
print(unique(sessions_infrastructure$ChargingStation))
get_evmodel_summary(evmodel = california_ev_model)
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
source("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evsim/R/charging_infrastructure.R", echo=TRUE)
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
devtools::load_all(".")
rm(list = c("add_charging_infrastructure", "plot_occupancy_duration_curve"))
devtools::load_all(".")
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
devtools::load_all(".")
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
library(ggplot2)
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
pkgdown::build_site()
?dygraphs::dyLegend
devtools::load_all(".")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(evsim)
devtools::check_win_devel()
devtools::release()
evsim::california_ev_sessions
evsim::california_ev_sessions$UserID
seq_len(2)
library(evsim)
devtools::release()
50*0.143
exp(1)
install.packages(c('shinydashboard', 'shinyWidgets', 'spelling', 'testthat'))
install.packages("devtools")
install.packages("ragg")
install.packages("devtools")
pkgdown::build_home()
pkgdown::preview_site()
pkgdown::build_site_github_pages()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_site()
setdiff(c("b", "c"), c("a", "b", "c"))
length(setdiff(c("b", "c"), c("a", "b", "c")))
de <- tibble(a = c(1 ,2, 3))
library(dplyur)
library(dplyr)
de <- tibble(a = c(1 ,2, 3))
de[c("a", "b")] <- 0
de
de <- tibble(a = c(1 ,2, 3))
de[c("c", "b")] <- 0
de
sessions_feature_names <- c(
"Session",
"ConnectionStartDateTime",
"ConnectionEndDateTime",
"ChargingStartDateTime",
"ChargingEndDateTime",
"Power",
"Energy",
"ConnectionHours",
"ChargingHours",
"ChargingStation",
"Socket"
)
usethis::use_data(sessions_feature_names, overwrite = TRUE)
