user_profiles
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated
sessions_estimated %>% filter(Profile == "Visit") %>% group_by(Power) %>% summarise(n = n())
sessions_estimated %>% filter(Profile == "Visit") %>% group_by(Power) %>% summarise(n = n()) %>% mutate(pct = n/sum(n))
sessions_estimated %>% filter(Profile == "Visit") %>% group_by(Power) %>% summarise(n = n()) %>% mutate(pct = n/sum(n)*100)
workday_models$energy_models
workday_models$energy_models[[1]]
workday_models
workday_models$energy_models[[1]] # Visit profile energy models
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
new_ev_model$metadata$tzone
)
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
ev_model$metadata$tzone
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday'),
profile = c('Visit', 'Worktime'),
ratio = c(0.2, 0.8),
power = c(NA, 11)
)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
ev_model$metadata$tzone
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated %>%
filter(Profile == "Worktime") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
0.2*20
sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = n_sessions_objective,
prob = (0.2, 0.4, 0.4), replace = T
sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = n_sessions_objective,
prob = c(0.2, 0.4, 0.4), replace = T
)[["power"]]
sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = 20,
prob = c(0.2, 0.4, 0.4), replace = T
)[["power"]]
pp <- sample_frac(
tibble(power = c(3.7, 7.4, 11)), size = 20,
prob = c(0.2, 0.4, 0.4), replace = T
)[["power"]]
tibble(Power = pp) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac(
+     tibble(power = c(3.7, 7.4, 11)), size = 20,
+     prob = c(0.2, 0.4, 0.4), replace = T
tibble(Power = sample_frac(
+     tibble(power = c(3.7, 7.4, 11)), size = 20,
+     prob = c(0.2, 0.4, 0.4), replace = T
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample_frac( tibble(power = c(3.7, 7.4, 11)), size = 20, prob = c(0.2, 0.4, 0.4), replace = T )[["power"]]) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04))
sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, .04), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 20, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 100, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 1000, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 10000, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 100, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
tibble(Power = sample(c(3.7, 7.4, 11), size = 100range(1, 40, prob = c(0.2, 0.4, 0.4), replace = T)) %>%
range(1, 2)
range(1, 5)
range(4)
?range
?range
library(evsim)
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
workday_models$energy_models[[1]] # Visit profile energy models
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
workday_models$energy_models[[1]] # Visit profile energy models
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
power_bags <- map(
charging_powers$ratio,
~ ceiling(.x*n_sessions_objective)
)
library(purrr)
power_bags <- map(
charging_powers$ratio,
~ ceiling(.x*n_sessions_objective)
)
n_sessions_objective <- 20
power_bags <- map(
charging_powers$ratio,
~ ceiling(.x*n_sessions_objective)
)
power_bags
random_idxs <- sample(
1:nrow(charging_powers),
size = 1000,
prob = charging_powers$ratio,
replace = T
)
random_idxs
estimated_power <- c()
for (i in seq(1, n_sessions_objective)) {
power_valid <- FALSE
while (!power_valid) {
power_idx <- sample(random_idxs, 1)
if (power_bags[[power_idx]] > 0) {
power_valid <- TRUE
}
}
estimated_power <- c(estimated_power, charging_powers$power[power_idx])
power_bags[[power_idx]] <- power_bags[[power_idx]] - 1
}
estimated_power
tibble(Power = estimated_power) %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
library(evsim)
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
workday_models$energy_models[[1]] # Visit profile energy models
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
ev_model$metadata$tzone
)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
ev_model$metadata$tzone
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
library(evsim)
knitr::opts_chunk$set(echo = TRUE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
weekend_models <- ev_model$models$user_profiles[[2]]
weekend_models
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(150, 50)
)
sessions_day
user_profiles <- tibble(
time_cycle = c('Workday', 'Workday', 'Weekend'),
profile = c('Visit', 'Worktime', 'Visit'),
ratio = c(0.2, 0.8, 1),
power = c(NA, 11, NA)
)
user_profiles
workday_models$energy_models[[1]] # Visit profile energy models
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
dttm_seq <- seq.POSIXt(
from = as.POSIXct('2019-09-10'),
to = as.POSIXct('2019-09-16'),
by = '15 min'
) %>%
lubridate::with_tz(
ev_model$metadata$tzone
)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
sessions_estimated %>%
filter(Profile == "Visit") %>%
group_by(Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
print(sessions_estimated)
sessions_estimated %>%
group_by(Profile, Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated %>%
group_by(Timecycle, Profile, Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated %>%
group_by(Profile, Power) %>%
summarise(n = n()) %>%
mutate(pct = n/sum(n)*100)
sessions_estimated %>%
group_by(Profile, Power) %>%
summarise(n = n()) %>%
ungroup() %>%
mutate(pct = n/sum(n)*100)
usethis::use_version()
usethis::use_version()
pkgdown::build_site()
.Last.error
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
library(evsim)
library(dplyr)
ev_model <- evsim::california_ev_model
ev_model
#' Get the user profiles distribution from the original data set
#' used to build the model
#'
#' @param evmodel object of class `evprof`
#'
#' @importFrom purrr map_dfr set_names
#' @importFrom dplyr %>% select any_of
#'
get_user_profiles_distribution <- function(evmodel) {
ev_model$models$user_profiles %>%
set_names(ev_model$models$time_cycle) %>%
map_dfr(
~ .x %>%
select(any_of(c('profile', 'ratio', 'power'))),
.id = 'time_cycle'
)
}
get_user_profiles_distribution(ev_model)
library(purrr)
get_user_profiles_distribution(ev_model)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
library(evsim)
library(dplyr)
library(lubridate)
library(dutils)
# Required parameters first
ev_model <- evsim::california_ev_model
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10, 10)
)
user_profiles <- get_user_profiles_distribution(ev_model)
charging_powers <- tibble(
power = c(3.7, 7.3, 11),
ratio = c(0.2, 0.4, 0.4)
)
# Sessions simulation
set.seed(123)
sessions <- simulate_sessions(
ev_model,
sessions_day,
user_profiles,
charging_powers,
dmy("31/01/2023"),
resolution = 30
) %>%
mutate(Profile = 'Users')
sessions %>%
select_if(is.timepoint) %>%
mutate_all(format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
library(evsim)
class(ev_model)
pkgdown::build_site()
pkgdown::build_site()
library(evsim)
library(evsim)
pkgdown::build_site()
library(evsim)
pkgdown::build_site()
