library(dplyr)
library(lubridate)
test_that("demand calculation is skipped if there are no sessions nor datetime sequence", {
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
expect_true(is.null(demand))
})
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all")
sessions <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all")
demand_vars <- unique(sessions[[by]])
by = "Profile"
demand_vars <- unique(sessions[[by]])
# Multi-processing parameter check
if (mc.cores > detectCores(logical = FALSE) | mc.cores < 1) {
mc.cores <- 1
}
my.mclapply <- switch(
Sys.info()[['sysname']], # check OS
Windows = {mclapply.windows}, # case: windows
Linux   = {mclapply}, # case: linux
Darwin  = {mclapply} # case: mac
)
#'   by = "15 mins"
#' )
#' demand <- get_demand(
#'   sessions,
#'   dttm_seq = dttm_seq,
#'   by = "Profile",
#'   resolution = 15
#' )
#' demand %>% plot_ts(ylab = "EV demand (kW)")
#'
get_demand <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, mc.cores = 1) {
if (nrow(sessions) == 0) {
stop("Error: `sessions` can't be an empty tibble.")
}
demand_vars <- unique(sessions[[by]])
# Multi-processing parameter check
if (mc.cores > detectCores(logical = FALSE) | mc.cores < 1) {
mc.cores <- 1
}
my.mclapply <- switch(
Sys.info()[['sysname']], # check OS
Windows = {mclapply.windows}, # case: windows
Linux   = {mclapply}, # case: linux
Darwin  = {mclapply} # case: mac
)
# Definition of `dttm_seq` and `resolution`
if (is.null(dttm_seq)) {
dttm_seq <- seq.POSIXt(
from = floor_date(min(sessions$ConnectionStartDateTime), 'day'),
to = floor_date(max(sessions$ConnectionEndDateTime), 'day') + days(1),
by = paste(resolution, 'min')
)
} else {
resolution <- as.numeric(dttm_seq[2] - dttm_seq[1], units = 'mins')
sessions <- sessions %>%
filter(
between(.data$ChargingStartDateTime, dttm_seq[1], dttm_seq[length(dttm_seq)])
)
}
if (nrow(sessions) == 0) {
demand <- tibble(datetime = dttm_seq)
} else {
# Remove sessions that are not consuming in certain time slots
sessions <- sessions %>%
filter(.data$Power > 0)
# Align time variables to current time resolution
if (!is_aligned(sessions, resolution)) {
message(paste0("Warning: charging sessions are aligned to ", resolution, "-minute resolution."))
sessions <- sessions %>%
adapt_charging_features(time_resolution = resolution)
}
# Expand sessions that are connected more than 1 time slot
sessions_to_expand <- sessions %>%
filter(.data$ConnectionHours > resolution/60) %>%
mutate(Month = month(.data$ConnectionStartDateTime))
if (nrow(sessions_to_expand) > 0) {
# Expand sessions
if (mc.cores == 1) {
sessions_expanded <- sessions_to_expand %>%
expand_sessions(resolution = resolution)
} else {
sessions_expanded <- sessions_to_expand  %>%
split(sessions_to_expand$Month) %>%
my.mclapply(
expand_sessions, resolution = resolution, mc.cores = mc.cores
) %>%
list_rbind()
}
# Join all sessions together
sessions_expanded <- sessions_expanded %>%
bind_rows(
sessions %>%
filter(!(.data$Session %in% sessions_to_expand$Session)) %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
)
} else {
sessions_expanded <- sessions %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
}
sessions_expanded <- sessions_expanded %>%
select(any_of(c('Session', 'Timeslot', 'Power'))) %>%
left_join(
sessions %>%
select('Session', !!sym(by)) %>%
distinct(),
by = 'Session'
)
# Calculate power demand by time slot and variable `by`
demand <- sessions_expanded %>%
group_by(!!sym(by), datetime = .data$Timeslot) %>%
summarise(Power = sum(.data$Power)) %>%
arrange(factor(!!sym(by), levels = unique(sessions[[by]]))) %>%
pivot_wider(names_from = !!sym(by), values_from = 'Power', values_fill = 0) %>%
right_join(
tibble(datetime = dttm_seq),
by = 'datetime'
) %>%
arrange(.data$datetime)
}
# browser()
# Check if some `by` variable is not in the tibble, then add zeros
demand_vars_to_add <- setdiff(demand_vars, colnames(demand))
if (length(demand_vars_to_add) > 0) {
demand[demand_vars_to_add] <- 0
}
return( replace(demand, is.na(demand), 0) )
}
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
test_that("demand calculation is skipped if there are no sessions", {
expect_error(
sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
)
})
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
sessions
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10) %>%
adapt_charging_features(time_resolution = 15)
test_that("demand is calculated properly by Session", {
demand <- sessions %>%
get_demand(by = "Session", resolution = 15)
expect_true(any(names(demand) %in% sessions$Session))
expect_equal(sum(rowSums(demand[-1]))*15/60, sum(sessions$Energy))
})
demand <- sessions %>%
get_demand(by = "Session", resolution = 15)
demand
# Get the example `evmodel` and `sessions` included in the package
resolution <- 15
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10) %>%
adapt_charging_features(time_resolution = resolution)
demand <- sessions %>%
get_demand(by = "Session", resolution = resolution)
expect_true(any(names(demand) %in% sessions$Session))
expect_true(all(sessions$Session %in% names(demand)))
sessions %>%
get_demand(by = "Profile", resolution = resolution)
# Get the example `evmodel` and `sessions` included in the package
resolution <- 15
sessions <- evsim::california_ev_sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10) %>%
adapt_charging_features(time_resolution = resolution)
demand <- sessions %>%
get_demand(by = "Session", resolution = resolution)
expect_true(all(sessions$Session %in% names(demand)))
sessions %>%
get_demand(by = "Profile", resolution = resolution)
expect_true(all(unique(sessions$Profile) %in% names(demand)))
unique(sessions$Profile)
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution)
expect_true(all(unique(sessions$Profile) %in% names(demand)))
expect_equal(sum(rowSums(demand[-1]))*resolution/60, sum(sessions$Energy))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
demand <- sessions %>%
get_demand(by = "Session", resolution = resolution)
expect_true(all(sessions$Session %in% names(demand)))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
round(sum(rowSums(demand[-1]))*resolution/60)
round(sum(sessions$Energy))
test_that("demand is calculated properly by Session", {
demand <- sessions %>%
get_demand(by = "Session", resolution = resolution)
expect_true(all(sessions$Session %in% names(demand)))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
})
test_that("demand is calculated properly by Profile", {
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution)
expect_true(all(unique(sessions$Profile) %in% names(demand)))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
})
dttm_seq <- seq.POSIXt(
as_datetime(dmy(01102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(07102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
demand <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
expect_true(nrow(demand) == length(dttm_seq))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
dttm_seq
sessions
dttm_seq <- seq.POSIXt(
as_datetime(dmy(08102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(15102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
demand <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
expect_true(nrow(demand) == length(dttm_seq))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
demand
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
demand %>% plot_ts()
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
sessions
my_get_demand <- get_demand <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, mc.cores = 1) {
# Multi-processing parameter check
if (mc.cores > detectCores(logical = FALSE) | mc.cores < 1) {
mc.cores <- 1
}
my.mclapply <- switch(
Sys.info()[['sysname']], # check OS
Windows = {mclapply.windows}, # case: windows
Linux   = {mclapply}, # case: linux
Darwin  = {mclapply} # case: mac
)
# Definition of `dttm_seq` and `resolution`
if (nrow(sessions) == 0) {
if (is.null(dttm_seq)) {
message("Must provide sessions or dttm_seq parameter")
return( NULL )
} else {
return( tibble(datetime = dttm_seq, demand = 0) )
}
} else {
if (is.null(dttm_seq)) {
dttm_seq <- seq.POSIXt(
from = floor_date(min(sessions$ConnectionStartDateTime), 'day'),
to = floor_date(max(sessions$ConnectionEndDateTime), 'day') + days(1),
by = paste(resolution, 'min')
)
} else {
resolution <- as.numeric(dttm_seq[2] - dttm_seq[1], units = 'mins')
sessions <- sessions %>%
filter(
between(.data$ChargingStartDateTime, dttm_seq[1], dttm_seq[length(dttm_seq)])
)
}
# Remove sessions that are not consuming in certain time slots
sessions <- sessions %>%
filter(.data$Power > 0)
# Align time variables to current time resolution
if (!is_aligned(sessions, resolution)) {
message(paste0("Warning: charging sessions are aligned to ", resolution, "-minute resolution."))
sessions <- sessions %>%
adapt_charging_features(time_resolution = resolution)
}
}
# Expand sessions that are connected more than 1 time slot
sessions_to_expand <- sessions %>%
filter(.data$ConnectionHours > resolution/60) %>%
mutate(Month = month(.data$ConnectionStartDateTime))
if (nrow(sessions_to_expand) > 0) {
# Expand sessions
if (mc.cores == 1) {
sessions_expanded <- sessions_to_expand %>%
expand_sessions(resolution = resolution)
} else {
sessions_expanded <- sessions_to_expand  %>%
split(sessions_to_expand$Month) %>%
my.mclapply(
expand_sessions, resolution = resolution, mc.cores = mc.cores
) %>%
list_rbind()
}
# Join all sessions together
sessions_expanded <- sessions_expanded %>%
bind_rows(
sessions %>%
filter(!(.data$Session %in% sessions_to_expand$Session)) %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
)
} else {
sessions_expanded <- sessions %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
}
sessions_expanded <- sessions_expanded %>%
select(any_of(c('Session', 'Timeslot', 'Power'))) %>%
left_join(
sessions %>%
select('Session', !!sym(by)) %>%
distinct(),
by = 'Session'
)
# Calculate power demand by time slot and variable `by`
demand <- sessions_expanded %>%
group_by(!!sym(by), datetime = .data$Timeslot) %>%
summarise(Power = sum(.data$Power)) %>%
arrange(factor(!!sym(by), levels = unique(sessions[[by]]))) %>%
pivot_wider(names_from = !!sym(by), values_from = 'Power', values_fill = 0) %>%
right_join(
tibble(datetime = dttm_seq),
by = 'datetime'
) %>%
arrange(.data$datetime)
# Check if some `by` variable is not in the tibble, then add zeros
by_vars <- unique(sessions[[by]])
by_vars_to_add <- setdiff(by_vars, colnames(demand))
if (length(by_vars_to_add) > 0) {
demand[by_vars_to_add] <- 0
}
return( replace(demand, is.na(demand), 0) )
}
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
expect_true(nrow(demand) == length(dttm_seq))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
library(parallel)
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
devtools::load_all(".")
devtools::load_all(".")
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
# Get the example `evmodel` and `sessions` included in the package
resolution <- 15
sessions <- evsim::california_ev_sessions_profiles %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10) %>%
adapt_charging_features(time_resolution = resolution)
dttm_seq <- seq.POSIXt(
as_datetime(dmy(08102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(15102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
expect_true(nrow(demand) == length(dttm_seq))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
my_get_demand <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, mc.cores = 1) {
# Multi-processing parameter check
if (mc.cores > detectCores(logical = FALSE) | mc.cores < 1) {
mc.cores <- 1
}
my.mclapply <- switch(
Sys.info()[['sysname']], # check OS
Windows = {mclapply.windows}, # case: windows
Linux   = {mclapply}, # case: linux
Darwin  = {mclapply} # case: mac
)
# Definition of `dttm_seq` and `resolution`
if (nrow(sessions) == 0) {
if (is.null(dttm_seq)) {
message("Must provide sessions or dttm_seq parameter")
return( NULL )
} else {
return( tibble(datetime = dttm_seq, demand = 0) )
}
} else {
if (is.null(dttm_seq)) {
dttm_seq <- seq.POSIXt(
from = floor_date(min(sessions$ConnectionStartDateTime), 'day'),
to = floor_date(max(sessions$ConnectionEndDateTime), 'day') + days(1),
by = paste(resolution, 'min')
)
} else {
resolution <- as.numeric(dttm_seq[2] - dttm_seq[1], units = 'mins')
sessions <- sessions %>%
filter(
between(.data$ChargingStartDateTime, dttm_seq[1], dttm_seq[length(dttm_seq)])
)
}
# Remove sessions that are not consuming in certain time slots
sessions <- sessions %>%
filter(.data$Power > 0)
# Align time variables to current time resolution
if (!is_aligned(sessions, resolution)) {
message(paste0("Warning: charging sessions are aligned to ", resolution, "-minute resolution."))
sessions <- sessions %>%
adapt_charging_features(time_resolution = resolution)
}
}
# Expand sessions that are connected more than 1 time slot
sessions_to_expand <- sessions %>%
filter(.data$ConnectionHours > resolution/60) %>%
mutate(Month = month(.data$ConnectionStartDateTime))
if (nrow(sessions_to_expand) > 0) {
# Expand sessions
if (mc.cores == 1) {
sessions_expanded <- sessions_to_expand %>%
expand_sessions(resolution = resolution)
} else {
sessions_expanded <- sessions_to_expand  %>%
split(sessions_to_expand$Month) %>%
my.mclapply(
expand_sessions, resolution = resolution, mc.cores = mc.cores
) %>%
list_rbind()
}
# Join all sessions together
sessions_expanded <- sessions_expanded %>%
bind_rows(
sessions %>%
filter(!(.data$Session %in% sessions_to_expand$Session)) %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
)
} else {
sessions_expanded <- sessions %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
}
sessions_expanded <- sessions_expanded %>%
select(any_of(c('Session', 'Timeslot', 'Power'))) %>%
left_join(
sessions %>%
select('Session', !!sym(by)) %>%
distinct(),
by = 'Session'
)
# Calculate power demand by time slot and variable `by`
demand <- sessions_expanded %>%
group_by(!!sym(by), datetime = .data$Timeslot) %>%
summarise(Power = sum(.data$Power)) %>%
arrange(factor(!!sym(by), levels = unique(sessions[[by]]))) %>%
pivot_wider(names_from = !!sym(by), values_from = 'Power', values_fill = 0) %>%
right_join(
tibble(datetime = dttm_seq),
by = 'datetime'
) %>%
arrange(.data$datetime)
# Check if some `by` variable is not in the tibble, then add zeros
by_vars <- unique(sessions[[by]])
by_vars_to_add <- setdiff(by_vars, colnames(demand))
if (length(by_vars_to_add) > 0) {
demand[by_vars_to_add] <- 0
}
return( replace(demand, is.na(demand), 0) )
}
demand <- sessions %>%
my_get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
expect_true(nrow(demand) == length(dttm_seq))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
expect_true(nrow(demand) == length(dttm_seq))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
demand
9954/2283
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = NULL)
expect_true(nrow(demand) == length(dttm_seq))
expect_equal(round(sum(rowSums(demand[-1]))*resolution/60), round(sum(sessions$Energy)))
test_that("demand is calculated properly with custom datetime sequence", {
dttm_seq <- seq.POSIXt(
as_datetime(dmy(08102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
as_datetime(dmy(15102018)) %>% force_tz(tz(sessions$ConnectionStartDateTime)),
by = "15 mins"
)
demand <- sessions %>%
get_demand(by = "Profile", resolution = resolution, dttm_seq = dttm_seq)
expect_true(nrow(demand) == length(dttm_seq))
})
nrow(sessions_to_expand) > 0
sessions_expanded
expand_session
evsim::expand_session
pkgdown::build_site()
?plot_ts
devtools::load_all(".")
?plot_ts
pkgdown::build_site()
