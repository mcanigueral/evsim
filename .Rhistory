#'
#' @return tibble
#' @export
#'
#' @importFrom purrr map map_dfr set_names
#' @importFrom dplyr mutate any_of row_number arrange left_join
#' @importFrom rlang .data
#' @importFrom xts align.time
#'
simulate_sessions <- function(evmodel, sessions_day, charging_powers, dates, resolution, connection_log=TRUE, energy_log=TRUE) {
ev_models <- evmodel[["models"]]
ev_models <- left_join(ev_models, sessions_day, by = 'time_cycle')
# Obtain sessions from all profiles in models
profiles <- unique(unlist(map(ev_models[["user_profiles"]], ~ .x[["profile"]])))
sessions_estimated <- map_dfr(
set_names(profiles, profiles),
~get_profile_sessions(.x, dates, ev_models, connection_log, energy_log),
.id = "Profile"
)
# Standardize the variables
sessions_estimated <- sessions_estimated %>%
mutate(
ConnectionStartDateTime = xts::align.time(.data$start_dt, n=60*resolution),
ConnectionHours = round_to_interval(.data$duration, resolution/60),
Power = sample(charging_powers[["power"]], size = nrow(sessions_estimated), prob = charging_powers[["ratio"]], replace = T),
Energy = round_to_interval(.data$energy, .data$Power*resolution/60)
)
# Limit energy charged according to power
limit_idx <- sessions_estimated$Energy > sessions_estimated$Power*sessions_estimated$ConnectionHours
sessions_estimated[limit_idx, "Energy"] <-
sessions_estimated[limit_idx, "Power"]*sessions_estimated[limit_idx, "ConnectionHours"]
# Increase energy resulting in 0kWh due to power round
e0_idx <- sessions_estimated$Energy <= 0
sessions_estimated[e0_idx, "Energy"] <- sessions_estimated[e0_idx, "Power"]*resolution/60
# Calculate charging time according to power and energy
sessions_estimated <- sessions_estimated %>%
mutate(
ChargingHours = .data$Energy/.data$Power,
ConnectionEndDateTime = .data$ConnectionStartDateTime + convert_time_num_to_period(.data$ConnectionHours),
ChargingStartDateTime = .data$ConnectionStartDateTime,
ChargingEndDateTime = .data$ConnectionStartDateTime + convert_time_num_to_period(.data$ChargingHours),
FlexibilityHours = .data$ConnectionHours - .data$ChargingHours
) %>%
arrange(.data$ConnectionStartDateTime) %>%
mutate(Session = paste0('S', row_number())) %>%
select('Profile', 'Session', 'ConnectionStartDateTime', 'ConnectionEndDateTime',
'ChargingStartDateTime', 'ChargingEndDateTime', 'Power', 'Energy',
'ConnectionHours', 'FlexibilityHours', 'ChargingHours')
return( sessions_estimated )
}
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60,
connection_log = TRUE,
energy_log = TRUE
)
#' @param profile_name profile name
#' @param dates datetime vector with dates to simualte (datetime values with hour set to 00:00)
#' @param ev_models profiles models
#' @param connection_log Logical, true if connection models have logarithmic transformations
#' @param energy_log Logical, true if energy models have logarithmic transformations
#'
#' @return tibble
#'
#' @importFrom purrr map_dfr
#'
get_profile_sessions <- function(profile_name, dates, ev_models, connection_log, energy_log) {
map_dfr(dates, ~get_profile_day_sessions(profile_name, .x, ev_models, connection_log, energy_log))
}
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60,
connection_log = TRUE,
energy_log = TRUE
)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60,
connection_log = TRUE,
energy_log = TRUE
)
head(sessions_estimated)
sessions_estimated$ConnectionStartDateTime[[1]]
sessions_estimated$ConnectionStartDateTime[[1]] %>% with_tz('Europe/Amsterdam')
library(lubridate)
sessions_estimated$ConnectionStartDateTime[[1]] %>% with_tz('Europe/Amsterdam')
ev_model$metadata[['tzone']] <- 'Europe/Amsterdam'
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60,
connection_log = TRUE,
energy_log = TRUE
)
head(sessions_estimated)
sessions_estimated$ConnectionStartDateTime[[1]]
#'
#' @return tibble
#' @export
#'
#' @importFrom purrr map map_dfr set_names
#' @importFrom dplyr mutate any_of row_number arrange left_join
#' @importFrom lubridate force_tz
#' @importFrom rlang .data
#' @importFrom xts align.time
#'
simulate_sessions <- function(evmodel, sessions_day, charging_powers, dates, resolution) {
ev_models <- evmodel[["models"]]
connection_log <- evmodel[['metadata']][['connection_log']]
energy_log <- evmodel[['metadata']][['energy_log']]
tzone <- evmodel[['metadata']][['tzone']]
ev_models <- left_join(ev_models, sessions_day, by = 'time_cycle')
# Obtain sessions from all profiles in models
profiles <- unique(unlist(map(ev_models[["user_profiles"]], ~ .x[["profile"]])))
sessions_estimated <- map_dfr(
set_names(profiles, profiles),
~get_profile_sessions(.x, dates, ev_models, connection_log, energy_log),
.id = "Profile"
)
# Standardize the variables
sessions_estimated <- sessions_estimated %>%
mutate(
ConnectionStartDateTime = force_tz(xts::align.time(.data$start_dt, n=60*resolution), tzone),
ConnectionHours = round_to_interval(.data$duration, resolution/60),
Power = sample(charging_powers[["power"]], size = nrow(sessions_estimated), prob = charging_powers[["ratio"]], replace = T),
Energy = round_to_interval(.data$energy, .data$Power*resolution/60)
)
# Limit energy charged according to power
limit_idx <- sessions_estimated$Energy > sessions_estimated$Power*sessions_estimated$ConnectionHours
sessions_estimated[limit_idx, "Energy"] <-
sessions_estimated[limit_idx, "Power"]*sessions_estimated[limit_idx, "ConnectionHours"]
# Increase energy resulting in 0kWh due to power round
e0_idx <- sessions_estimated$Energy <= 0
sessions_estimated[e0_idx, "Energy"] <- sessions_estimated[e0_idx, "Power"]*resolution/60
# Calculate charging time according to power and energy
sessions_estimated <- sessions_estimated %>%
mutate(
ChargingHours = .data$Energy/.data$Power,
ConnectionEndDateTime = .data$ConnectionStartDateTime + convert_time_num_to_period(.data$ConnectionHours),
ChargingStartDateTime = .data$ConnectionStartDateTime,
ChargingEndDateTime = .data$ConnectionStartDateTime + convert_time_num_to_period(.data$ChargingHours),
FlexibilityHours = .data$ConnectionHours - .data$ChargingHours
) %>%
arrange(.data$ConnectionStartDateTime) %>%
mutate(Session = paste0('S', row_number())) %>%
select('Profile', 'Session', 'ConnectionStartDateTime', 'ConnectionEndDateTime',
'ChargingStartDateTime', 'ChargingEndDateTime', 'Power', 'Energy',
'ConnectionHours', 'FlexibilityHours', 'ChargingHours')
return( sessions_estimated )
}
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60,
connection_log = TRUE,
energy_log = TRUE
)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60
)
sessions_estimated$ConnectionStartDateTime[[1]]
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all()
ev_model$metadata[['tzone']] <- 'Europe/Amsterdam'
usethis::use_data(readRDS('R/evmodel.RDS'), internal = T, overwrite = T)
ev_model <- readRDS('R/evmodel.RDS')
usethis::use_data(ev_model, internal = T, overwrite = T)
knitr::opts_chunk$set(echo = TRUE)
# To include the ev_model object run this in Console:
# ev_model <- readRDS('R/evmodel.RDS'); ev_model <- readRDS('R/evmodel.RDS')
devtools::load_all()
print(ev_model)
readRDS('R/evmodel.RDS')
knitr::opts_chunk$set(echo = TRUE)
# To include the ev_model object run this in Console:
# ev_model <- readRDS('R/evmodel.RDS'); ev_model <- readRDS('R/evmodel.RDS')
devtools::load_all()
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
new_ratios <- tibble(
time_cycle = rep('Workday', 7),
profile = workday_models$profile,
ratio = c(0, 0.1, 0.1, 0.2, 0.2, 0.3, 0.1)
)
new_ratios
ev_model <- update_profiles_ratios(ev_model, new_ratios)
ev_model$models$user_profiles[[1]]
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(250, 275, 200, 200)
)
sessions_day
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-11'), to = as.Date('2019-09-17'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60
)
#'
#' @return tibble
#' @export
#'
#' @importFrom purrr map map_dfr set_names
#' @importFrom dplyr mutate any_of row_number arrange left_join
#' @importFrom lubridate force_tz
#' @importFrom rlang .data
#' @importFrom xts align.time
#'
simulate_sessions <- function(evmodel, sessions_day, charging_powers, dates, resolution) {
ev_models <- evmodel[["models"]]
connection_log <- evmodel[['metadata']][['connection_log']]
energy_log <- evmodel[['metadata']][['energy_log']]
tzone <- evmodel[['metadata']][['tzone']]
ev_models <- left_join(ev_models, sessions_day, by = 'time_cycle')
# Obtain sessions from all profiles in models
profiles <- unique(unlist(map(ev_models[["user_profiles"]], ~ .x[["profile"]])))
sessions_estimated <- map_dfr(
set_names(profiles, profiles),
~get_profile_sessions(.x, dates, ev_models, connection_log, energy_log),
.id = "Profile"
)
# Standardize the variables
sessions_estimated <- sessions_estimated %>%
mutate(
ConnectionStartDateTime = force_tz(align.time(.data$start_dt, n=60*resolution), tzone),
ConnectionHours = round_to_interval(.data$duration, resolution/60),
Power = sample(charging_powers[["power"]], size = nrow(sessions_estimated), prob = charging_powers[["ratio"]], replace = T),
Energy = round_to_interval(.data$energy, .data$Power*resolution/60)
)
# Limit energy charged according to power
limit_idx <- sessions_estimated$Energy > sessions_estimated$Power*sessions_estimated$ConnectionHours
sessions_estimated[limit_idx, "Energy"] <-
sessions_estimated[limit_idx, "Power"]*sessions_estimated[limit_idx, "ConnectionHours"]
# Increase energy resulting in 0kWh due to power round
e0_idx <- sessions_estimated$Energy <= 0
sessions_estimated[e0_idx, "Energy"] <- sessions_estimated[e0_idx, "Power"]*resolution/60
# Calculate charging time according to power and energy
sessions_estimated <- sessions_estimated %>%
mutate(
ChargingHours = .data$Energy/.data$Power,
ConnectionEndDateTime = .data$ConnectionStartDateTime + convert_time_num_to_period(.data$ConnectionHours),
ChargingStartDateTime = .data$ConnectionStartDateTime,
ChargingEndDateTime = .data$ConnectionStartDateTime + convert_time_num_to_period(.data$ChargingHours),
FlexibilityHours = .data$ConnectionHours - .data$ChargingHours
) %>%
arrange(.data$ConnectionStartDateTime) %>%
mutate(Session = paste0('S', row_number())) %>%
select('Profile', 'Session', 'ConnectionStartDateTime', 'ConnectionEndDateTime',
'ChargingStartDateTime', 'ChargingEndDateTime', 'Power', 'Energy',
'ConnectionHours', 'FlexibilityHours', 'ChargingHours')
return( sessions_estimated )
}
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60
)
install.packages('lubridate')
install.packages("lubridate")
knitr::opts_chunk$set(echo = TRUE)
# To include the ev_model object run this in Console:
# ev_model <- readRDS('R/evmodel.RDS'); ev_model <- readRDS('R/evmodel.RDS')
devtools::load_all()
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
knitr::opts_chunk$set(echo = TRUE)
# To include the ev_model object run this in Console:
# ev_model <- readRDS('R/evmodel.RDS'); ev_model <- readRDS('R/evmodel.RDS')
devtools::load_all()
print(ev_model)
ev_model <- update_profiles_ratios(ev_model, new_ratios)
new_ratios <- tibble(
time_cycle = rep('Workday', 7),
profile = workday_models$profile,
ratio = c(0, 0.1, 0.1, 0.2, 0.2, 0.3, 0.1)
)
new_ratios
ev_model <- update_profiles_ratios(ev_model, new_ratios)
ev_model$models$user_profiles[[1]]
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(250, 275, 200, 200)
)
sessions_day
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-11'), to = as.Date('2019-09-17'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60
)
library(lubridate)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 60
)
head(sessions_estimated)
print(sessions_estimated)
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
6.75*7.3
dttm_seq <- seq.POSIXt(from = as.Date('20169-09-11'), to = as.Date('2019-09-18'), by = '15 min')
dttm_seq <- seq.POSIXt(from = as.Date('20169-09-11'), to = as.Date('2019-09-18'), by = '15 minutes')
dttm_seq <- seq.POSIXt(from = as.Date('2019-09-11'), to = as.Date('2019-09-18'), by = '15 minutes')
as.Date.POSIXct('2019-09-11')
as.POSIXct('2019-09-11')
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-11'), to = as.POSIXct('2019-09-18'), by = '15 min')
dttm_seq
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-11'), to = as.POSIXct('2019-09-18'), by = '15 min', tz = 'Europe/Amsterdam')
dttm_seq
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-11'), to = as.POSIXct('2019-09-18'), by = '15 min', tz = 'UTC')
dttm_seq
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-11'), to = as.POSIXct('2019-09-18'), by = '15 min', tzone = 'UTC')
dttm_seq
df_to_ts <- function(df) {
xts::xts(df[-1], order.by = df[[1]])
}
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
library(lubridate)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
library(dplyr)
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
knitr::opts_chunk$set(echo = TRUE)
# To include the ev_model object run this in Console:
# ev_model <- readRDS('R/evmodel.RDS'); ev_model <- readRDS('R/evmodel.RDS')
devtools::load_all()
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
new_ratios <- tibble(
time_cycle = rep('Workday', 7),
profile = workday_models$profile,
ratio = c(0, 0.1, 0.1, 0.2, 0.2, 0.3, 0.1)
)
new_ratios
ev_model <- update_profiles_ratios(ev_model, new_ratios)
ev_model$models$user_profiles[[1]]
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(250, 275, 200, 200)
)
sessions_day
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-11'), to = as.Date('2019-09-17'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-11'), to = as.POSIXct('2019-09-18'), by = '15 min')
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
devtools::install_github('dutils')
devtools::install_github('mcanigueral/dutils')
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T) %>%
dygraphs::dyStackedRibbonGroup()
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-10'), to = as.POSIXct('2019-09-16'), by = '15 min')
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-10'), to = as.POSIXct('2019-09-17'), by = '15 min')
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-10'), to = as.POSIXct('2019-09-17'), by = '15 min')
estimated_demand <- sessions_estimated %>%
get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-10'), to = as.POSIXct('2019-09-16'), by = '15 min')
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
# To include the ev_model object run this in Console:
# ev_model <- readRDS('R/evmodel.RDS'); ev_model <- readRDS('R/evmodel.RDS')
devtools::load_all()
estimated_demand
estimated_demand
.Last.error.trace
library(dutils)
estimated_demand <- sessions_estimated %>% get_demand(dttm_seq)
knitr::opts_chunk$set(echo = TRUE)
# To include the ev_model object run this in Console:
# ev_model <- readRDS('R/evmodel.RDS'); ev_model <- readRDS('R/evmodel.RDS')
devtools::load_all()
print(ev_model)
workday_models <- ev_model$models$user_profiles[[1]]
workday_models
new_ratios <- tibble(
time_cycle = rep('Workday', 7),
profile = workday_models$profile,
ratio = c(0, 0.1, 0.1, 0.2, 0.2, 0.3, 0.1)
)
new_ratios
ev_model <- update_profiles_ratios(ev_model, new_ratios)
ev_model$models$user_profiles[[1]]
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(250, 275, 200, 200)
)
sessions_day
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
charging_powers
dates_sim <- seq.Date(from = as.Date('2019-09-10'), to = as.Date('2019-09-15'), by = '1 day')
dates_sim
sessions_estimated <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
dates_sim,
resolution = 15
)
head(sessions_estimated)
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-10'), to = as.POSIXct('2019-09-16'), by = '15 min')
estimated_demand <- sessions_estimated %>% get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
dttm_seq <- seq.POSIXt(from = as.POSIXct('2019-09-10'), to = as.POSIXct('2019-09-16'), by = '15 min') %>%
lubridate::with_tz('Europe/Amsterdam')
estimated_demand <- sessions_estimated %>% get_demand(dttm_seq)
estimated_demand %>%
dutils::dyplot(ylab = 'Power demand (kW)', fillGraph = T, stackedGraph = T)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
