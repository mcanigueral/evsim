sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
sessions %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
set.seed(11)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
sessions %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(11, 11, 11, 11)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(11)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
sessions %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
set.seed(19)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
sessions %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(19)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
sessions %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
ev_model
#' @param profiles_names character vector with names of user profiles to simulate
#' @param ev_models profiles models
#' @param connection_log Logical, true if connection models have logarithmic transformations
#' @param energy_log Logical, true if energy models have logarithmic transformations
#'
#' @return tibble
#'
#' @importFrom dplyr mutate %>% select everything, slice_sample
#' @importFrom purrr map_dfr pmap_dfr
#'
get_day_sessions <- function(day, ev_models, connection_log, energy_log) {
day_features <- get_day_features(day, ev_models)
profiles_day_features <- map_dfr(
day_features$models$profile,
~ get_profile_day_features(.x, day_features$models, day_features$n_sessions)
)
day_sessions <- pmap_dfr(
profiles_day_features,
~ estimate_sessions(..1, ..2, ..3, ..4, connection_log, energy_log) %>%
mutate(Profile = ..1) %>%
select("Profile", everything())
)
if (nrow(day_sessions) > day_features$n_sessions) {
day_sessions <- day_sessions %>%
slice_sample(n = day_features$n_sessions)
}
return( day_sessions )
}
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
ev_model$models
ev_model$models$user_profiles
get_day_features(today(), ev_model)
ev_model$models$user_profiles[1]
ev_model$models$user_profiles[[1]]
ev_model$models$user_profiles[[c(TRUE, F, F, F)]]
ev_model$models$user_profiles[c(T, F, F, F)]
ev_model$models$user_profiles[[c(T, F, F, F)]]
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
?pmap_dfr
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
#' @param ev_models profiles models
#' @param connection_log Logical, true if connection models have logarithmic transformations
#' @param energy_log Logical, true if energy models have logarithmic transformations
#'
#' @return tibble
#'
#' @importFrom dplyr mutate select everything %>% slice_sample
#' @importFrom rlang .data
#' @importFrom purrr pmap_dfr
#'
get_day_sessions <- function(day, ev_models, connection_log, energy_log) {
day_features <- get_day_features(day, ev_models)
day_sessions <- pmap_dfr(
day_features$model,
~ estimate_sessions(..1, floor(..2*day_features$n_sessions)+1, ..3, ..4, connection_log, energy_log) %>%
mutate(Profile = ..1) %>%
select("Profile", everything())
)
# mutate(start_dt = day + convert_time_num_to_period(.data$start)) %>%
# select(- .data$start)
if (nrow(day_sessions) > day_features$n_sessions) {
day_sessions <- day_sessions %>%
slice_sample(n = day_features$n_sessions)
}
return( day_sessions )
}
#' @param ev_models profiles models
#' @param connection_log Logical, true if connection models have logarithmic transformations
#' @param energy_log Logical, true if energy models have logarithmic transformations
#'
#' @return tibble
#'
#' @importFrom dplyr mutate select everything %>% slice_sample
#' @importFrom rlang .data
#' @importFrom purrr pmap_dfr
#'
get_day_sessions <- function(day, ev_models, connection_log, energy_log) {
day_features <- get_day_features(day, ev_models)
day_sessions <- pmap_dfr(
day_features$model,
~ estimate_sessions(..1, floor(..2*day_features$n_sessions)+1, ..3, ..4, connection_log, energy_log) %>%
mutate(Profile = ..1) %>%
select("Profile", everything())
)
# mutate(start_dt = day + convert_time_num_to_period(.data$start)) %>%
# select(- .data$start)
if (nrow(day_sessions) > day_features$n_sessions) {
day_sessions <- day_sessions %>%
slice_sample(n = day_features$n_sessions)
}
return( day_sessions )
}
#' @param ev_models profiles models
#' @param connection_log Logical, true if connection models have logarithmic transformations
#' @param energy_log Logical, true if energy models have logarithmic transformations
#'
#' @return tibble
#'
#' @importFrom dplyr mutate select everything %>% slice_sample
#' @importFrom rlang .data
#' @importFrom purrr pmap_dfr
#'
get_day_sessions <- function(day, ev_models, connection_log, energy_log) {
day_features <- get_day_features(day, ev_models)
day_sessions <- pmap_dfr(
day_features$model,
~ estimate_sessions(..1, floor(..2*day_features$n_sessions)+1, ..3, ..4, connection_log, energy_log) %>%
mutate(Profile = ..1) %>%
select("Profile", everything())
)
# mutate(start_dt = day + convert_time_num_to_period(.data$start)) %>%
# select(- .data$start)
if (nrow(day_sessions) > day_features$n_sessions) {
day_sessions <- day_sessions %>%
slice_sample(n = day_features$n_sessions)
}
return( day_sessions )
}
knitr::opts_chunk$set(echo = TRUE)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
sessions %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand') %>%
select(-c(Profile, ConnectionHours, ChargingHours))
sessions %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
install.packages('pkgdown')
pkgdown::build_site()
install.packages('pkgdown')
install.packages('pkgdown')
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
?dyOptions
?dyOptions
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
devtools::load_all() # ev_model included
library(dplyr)
library(lubridate)
library(dutils)
sessions_day <- tibble(
time_cycle = ev_model$models$time_cycle,
n_sessions = c(10.5, 10.5, 10.5, 10.5)
)
charging_powers <- tibble(
power = c(3.7, 7.3, 11, 22),
ratio = c(0.2, 0.4, 0.3, 0.1)
)
demand_5 <- sessions %>%
get_demand(resolution = 5)
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 15
) %>%
mutate(Profile = 'Demand')
sessions %>%
select(-c(Profile)) %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
demand_5 <- sessions %>%
get_demand(resolution = 5)
demand_10 <- sessions %>%
get_demand(resolution = 10)
demand_15 <- sessions %>%
get_demand(resolution = 15)
demand_5 %>%
rename(`5-minute resolution` = Demand) %>%
left_join(
rename(demand_10, `10-minute resolution` = Demand)
) %>%
left_join(
rename(demand_15, `15-minute resolution` = Demand)
) %>%
fill(-datetime, 'down') %>%
dyplot(stepPlot = T, strokeWidth = 2, ylab = 'Power (kW)')
demand_5 %>%
rename(`5-minute resolution` = Demand) %>%
left_join(
rename(demand_10, `10-minute resolution` = Demand)
) %>%
left_join(
rename(demand_15, `15-minute resolution` = Demand)
) %>%
fill(-datetime, .direction = 'down') %>%
dyplot(stepPlot = T, strokeWidth = 2, ylab = 'Power (kW)')
set.seed(1234)
sessions <- simulate_sessions(
ev_model,
sessions_day,
charging_powers,
today(),
resolution = 30
) %>%
mutate(Profile = 'Demand')
sessions %>%
select(-c(Profile)) %>%
mutate_if(is.timepoint, format, "%d/%m/%Y %H:%M") %>%
knitr::kable()
demand_5 <- sessions %>%
get_demand(resolution = 5)
demand_15 <- sessions %>%
get_demand(resolution = 15)
demand_30 <- sessions %>%
get_demand(resolution = 30)
demand_5 %>%
rename(`5-minute resolution` = Demand) %>%
left_join(
rename(demand_15, `15-minute resolution` = Demand)
) %>%
left_join(
rename(demand_30, `30-minute resolution` = Demand)
) %>%
fill(-datetime, .direction = 'down') %>%
dyplot(stepPlot = T, strokeWidth = 2, ylab = 'Power (kW)')
sum(demand_5$Demand*5/60)
sum(demand_15$Demand*15/60)
sum(demand_30$Demand*30/60)
sum(demand_5$Demand*5/60) # in kWh
sum(demand_15$Demand*15/60) # in kWh
sum(demand_30$Demand*30/60) # in kWh
pkgdown::build_site()
library(dplyr)
install.packages('roxygen2')
install.packages(c('shiny', 'shinydashboard', 'shinyWidgets'))
install.packages('pdflatex')
install.packages('devtools')
install.packages('pkgdown')
install.packages('pkgdown')
install.packages('pkgdown')
install.packages('pkgdown')
install.packages('devtools')
library(evsim)
library(evsim)
1
gc()
library(evsim)
library(evsim)
!is.numeric(NA)
library(evsim)
is.numeric(NA)
!is.numeric(NA)
!is.numeric(NULL)
library(evsim)
library(evsim)
sample(c(11), 4, prob = 1, replace = T)
dplyr::sample_frac(c(11), size = 4, weight = 1, replace = T)
dplyr::sample_frac(tibble(power = c(11)), size = 4, weight = 1, replace = T)
library(dplyr)
dplyr::sample_frac(tibble(power = c(11)), size = 4, weight = 1, replace = T)
library(evsim)
library(evsim)
sample_n(c(1, 2, 3), size = 1)
samplec(1, 2, 3), size = 1)
sample(c(1, 2, 3), size = 1)
sample(c(), size = 1)
library(evsim)
library(evsim)
library(evsim)
library(evsim)
library(evsim)
library(evsim)
library(evsim)
install.packages(c('shinydashboard', 'shinyWidgets'))
library(evsim)
library(evsim)
pkgdown::build_favicons()
pkgdown::build_favicons()
pkgdown::build_favicons()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
