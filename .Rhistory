# Get the example `evmodel` and `sessions` included in the package
ev_model <- evsim::california_ev_model
temp_dir <- tempdir()
# For workdays time cycle
workdays_parameters <- dplyr::tibble(
profile = c("Worktime", "Visit"),
ratio = c(80, 20),
start_mean = c(9, 11),
start_sd = c(1, 4),
duration_mean = c(8, 4),
duration_sd = c(0.5, 2),
energy_mean = c(15, 6),
energy_sd = c(4, 3)
)
# For weekends time cycle
weekends_parameters <- dplyr::tibble(
profile = "Visit",
ratio = 100,
start_mean = 12,
start_sd = 4,
duration_mean = 3,
duration_sd = 2,
energy_mean = 4,
energy_sd = 4
)
parameters_lst <- list(workdays_parameters, weekends_parameters)
parameters_lst
# Get the whole model
ev_model <- get_custom_ev_model(
names = c("Workdays", "Weekends"),
months_lst = list(1:12, 1:12),
wdays_lst = list(1:5, 6:7),
parameters_lst,
connection_log = FALSE,
energy_log = FALSE,
data_tz = "Europe/Amsterdam"
)
ev_model
ev_model$models
ev_model$models$user_profiles
ev_model$models$user_profiles[[1]]$connection_models
ev_model$models$user_profiles[[1]]$connection_models[[1]]$sigma
get_charging_rates_distribution(evsim::california_ev_sessions, unit = "year")
dyplot
library(dutils)
dyplot
format_dygraph
library(evsim)
library(evsim)
library(evsim)
devtools::check_win_devel()
devtools::release()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F, error = F)
library(evsim)
library(dplyr)
library(lubridate)
evmodel_custom
pkgdown::build_article("vignettes/custom_evmodel.Rmd")
pkgdown::build_article("custom_evmodel.Rmd")
pkgdown::build_article("custom_evmodel")
pkgdown::preview_page('articles/custom_evmodel.html')
pkgdown::build_article("custom_evmodel")
pkgdown::build_article("custom_evmodel")
?mlapply
seq(12, 0, 15/60)
seq(from = 12, to = 0, by= 15/60)
seq(from = 12, to = 0, by= -15/60)
library(evsim)
12.9/0.25
seq(from = 12.9, length.out = ceiling(12.9*60/resolution), by= -15/60)
seq(from = 12.9, length.out = ceiling(12.9*60/15), by= -15/60)
0.15*60
install.packages("spelling")
library(evsim)
library(evsim)
library(evsim)
sessions
library(evsim)
california_ev_sessions
california_ev_sessions %>% adapt_charging_features(time_resolution = 15)
librayr(dplyr)
library(dplyr)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% pull(ConnectionStartDateTime) %>% lubridate::as.interval()
library(lubridate)
csdt <- california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% pull(ConnectionStartDateTime)
csdt - lag(csdt)
unique((csdt - lag(csdt))/15
unique(csdt - lag(csdt))
minutes(csdt)
minute(csdt)
unique(minute(csdt))
unique(minute(csdt))/15
unique(minute(csdt))%%15
sum(unique(minute(csdt))%%15)
california_ev_sessions %>% is_aligned
is_aligned <- function(sessions, resolution) {
connection_start_dt <- sessions$ConnectionStartDateTime
if (sum(unique(lubridate::minute(connection_start_dt)) %% resolution) == 0) {
return( TRUE )
} else {
return( FALSE )
}
}
california_ev_sessions %>% is_aligned
california_ev_sessions %>% is_aligned(15)
csdt <- california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% is_aligned(15)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% is_aligned(15)
california_ev_sessions %>% adapt_charging_features(time_resolution = 15) %>% is_aligned(60)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
sample(c(1, 2, 3), 1)
sample(c(1, 2, 3), 2)
sample(c(1, 2, 3), 5)
sample(c(1, 2, 3), 5, replace = T)
log(1)
log(1)
library(evsim)
library(evsim)
slice_sample(tibble(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
library(dplyr)
slice_sample(tibble(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
slice_sample(data.frame(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
log(0)
exp(-4)
exp(1)
log(0.5)
log(1)
slice_sample(data.frame(a = c(1, 2, 3), b = c(4, 5, 6)), n = 1)
slice_sample(data.frame(a = c(1, 2, 3), b = c(4, 5, 6)), n = 5, replace = TRUE)
usethis::edit_r_environ()
library(evsim)
library(evsim)
library(evsim)
c(1, 2, 3)[c(1, 2, 3) > 4]
length(c(1, 2, 3)[c(1, 2, 3) > 4])
library(evsim)
library(evsim)
devtools::load_all(".")
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60
)
print(unique(sessions_infrastructure$ChargingStation))
View(sessions_infrastructure)
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60,
)
print(unique(sessions_infrastructure$ChargingStation))
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, n_sockets = 4
)
print(unique(sessions_infrastructure$ChargingStation))
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, n_sockets = 3
)
print(unique(sessions_infrastructure$ChargingStation))
# Now without considering the occupancy values that only represent
# a 10% of the time
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, duration_th = 10, n_sockets = 3
)
print(unique(sessions_infrastructure$ChargingStation))
# Now without considering the occupancy values that only represent
# a 10% of the time
sessions_infrastructure <- add_charging_infrastructure(
sessions = head(evsim::california_ev_sessions, 50),
resolution = 60, duration_th = 10, n_sockets = 4
)
print(unique(sessions_infrastructure$ChargingStation))
get_evmodel_summary(evmodel = california_ev_model)
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
source("~/Resourcefully Dropbox/Marc Canigueral/PROJECTS/R PACKAGES/evsim/R/charging_infrastructure.R", echo=TRUE)
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
devtools::load_all(".")
rm(list = c("add_charging_infrastructure", "plot_occupancy_duration_curve"))
devtools::load_all(".")
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
devtools::load_all(".")
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
library(ggplot2)
library(dplyr)
sessions <- head(evsim::california_ev_sessions_profiles, 100)
plot_occupancy_duration_curve(
sessions,
by = "Profile",
resolution = 15
)
pkgdown::build_site()
?dygraphs::dyLegend
devtools::load_all(".")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(evsim)
devtools::check_win_devel()
devtools::release()
evsim::california_ev_sessions
evsim::california_ev_sessions$UserID
seq_len(2)
library(evsim)
devtools::release()
50*0.143
exp(1)
install.packages(c('shinydashboard', 'shinyWidgets', 'spelling', 'testthat'))
install.packages("devtools")
install.packages("ragg")
install.packages("devtools")
pkgdown::build_home()
pkgdown::preview_site()
pkgdown::build_site_github_pages()
pkgdown::build_site()
pkgdown::preview_site()
pkgdown::build_site()
setdiff(c("b", "c"), c("a", "b", "c"))
length(setdiff(c("b", "c"), c("a", "b", "c")))
de <- tibble(a = c(1 ,2, 3))
library(dplyur)
library(dplyr)
de <- tibble(a = c(1 ,2, 3))
de[c("a", "b")] <- 0
de
de <- tibble(a = c(1 ,2, 3))
de[c("c", "b")] <- 0
de
sessions_feature_names <- c(
"Session",
"ConnectionStartDateTime",
"ConnectionEndDateTime",
"ChargingStartDateTime",
"ChargingEndDateTime",
"Power",
"Energy",
"ConnectionHours",
"ChargingHours",
"ChargingStation",
"Socket"
)
usethis::use_data(sessions_feature_names, overwrite = TRUE)
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
sessions
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
sessions
demand <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
dttm_seq_2 <- demand$datetime + days(1)
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
demand2
dttm_seq_2 <- demand$datetime + years(1)
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
demand2
devtools::load_all(".")
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
devtools::load_all(".")
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
devtools::load_all(".")
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
demand
# Check if some `by` variable is not in the tibble, then add zeros
by_vars <- unique(sessions[[by]])
by_vars
by
sessions
devtools::load_all(".")
devtools::load_all(".")
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
demand2
devtools::load_all(".")
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
demand
sessions
devtools::load_all(".")
devtools::load_all(".")
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
demand2
expect_equal(sum(demand2$All), 0)
test_that("zeros are returned when no sessions have demand in datetime_seq", {
demand <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
dttm_seq_2 <- demand$datetime + years(1)
demand2 <- sessions %>%
mutate(Profile = "All") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = dttm_seq_2)
expect_equal(sum(demand2$All), 0)
})
test_that("demand calculation is skipped if there are no sessions nor datetime sequence", {
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
expect_true(is.null(demand))
})
library(testthat)
library(evsim)
library(dplyr)
library(lubridate)
test_that("demand calculation is skipped if there are no sessions nor datetime sequence", {
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
expect_true(is.null(demand))
})
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all")
sessions <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all")
demand_vars <- unique(sessions[[by]])
by = "Profile"
demand_vars <- unique(sessions[[by]])
# Multi-processing parameter check
if (mc.cores > detectCores(logical = FALSE) | mc.cores < 1) {
mc.cores <- 1
}
my.mclapply <- switch(
Sys.info()[['sysname']], # check OS
Windows = {mclapply.windows}, # case: windows
Linux   = {mclapply}, # case: linux
Darwin  = {mclapply} # case: mac
)
#'   by = "15 mins"
#' )
#' demand <- get_demand(
#'   sessions,
#'   dttm_seq = dttm_seq,
#'   by = "Profile",
#'   resolution = 15
#' )
#' demand %>% plot_ts(ylab = "EV demand (kW)")
#'
get_demand <- function(sessions, dttm_seq = NULL, by = "Profile", resolution = 15, mc.cores = 1) {
if (nrow(sessions) == 0) {
stop("Error: `sessions` can't be an empty tibble.")
}
demand_vars <- unique(sessions[[by]])
# Multi-processing parameter check
if (mc.cores > detectCores(logical = FALSE) | mc.cores < 1) {
mc.cores <- 1
}
my.mclapply <- switch(
Sys.info()[['sysname']], # check OS
Windows = {mclapply.windows}, # case: windows
Linux   = {mclapply}, # case: linux
Darwin  = {mclapply} # case: mac
)
# Definition of `dttm_seq` and `resolution`
if (is.null(dttm_seq)) {
dttm_seq <- seq.POSIXt(
from = floor_date(min(sessions$ConnectionStartDateTime), 'day'),
to = floor_date(max(sessions$ConnectionEndDateTime), 'day') + days(1),
by = paste(resolution, 'min')
)
} else {
resolution <- as.numeric(dttm_seq[2] - dttm_seq[1], units = 'mins')
sessions <- sessions %>%
filter(
between(.data$ChargingStartDateTime, dttm_seq[1], dttm_seq[length(dttm_seq)])
)
}
if (nrow(sessions) == 0) {
demand <- tibble(datetime = dttm_seq)
} else {
# Remove sessions that are not consuming in certain time slots
sessions <- sessions %>%
filter(.data$Power > 0)
# Align time variables to current time resolution
if (!is_aligned(sessions, resolution)) {
message(paste0("Warning: charging sessions are aligned to ", resolution, "-minute resolution."))
sessions <- sessions %>%
adapt_charging_features(time_resolution = resolution)
}
# Expand sessions that are connected more than 1 time slot
sessions_to_expand <- sessions %>%
filter(.data$ConnectionHours > resolution/60) %>%
mutate(Month = month(.data$ConnectionStartDateTime))
if (nrow(sessions_to_expand) > 0) {
# Expand sessions
if (mc.cores == 1) {
sessions_expanded <- sessions_to_expand %>%
expand_sessions(resolution = resolution)
} else {
sessions_expanded <- sessions_to_expand  %>%
split(sessions_to_expand$Month) %>%
my.mclapply(
expand_sessions, resolution = resolution, mc.cores = mc.cores
) %>%
list_rbind()
}
# Join all sessions together
sessions_expanded <- sessions_expanded %>%
bind_rows(
sessions %>%
filter(!(.data$Session %in% sessions_to_expand$Session)) %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
)
} else {
sessions_expanded <- sessions %>%
mutate(Timeslot = .data$ConnectionStartDateTime)
}
sessions_expanded <- sessions_expanded %>%
select(any_of(c('Session', 'Timeslot', 'Power'))) %>%
left_join(
sessions %>%
select('Session', !!sym(by)) %>%
distinct(),
by = 'Session'
)
# Calculate power demand by time slot and variable `by`
demand <- sessions_expanded %>%
group_by(!!sym(by), datetime = .data$Timeslot) %>%
summarise(Power = sum(.data$Power)) %>%
arrange(factor(!!sym(by), levels = unique(sessions[[by]]))) %>%
pivot_wider(names_from = !!sym(by), values_from = 'Power', values_fill = 0) %>%
right_join(
tibble(datetime = dttm_seq),
by = 'datetime'
) %>%
arrange(.data$datetime)
}
# browser()
# Check if some `by` variable is not in the tibble, then add zeros
demand_vars_to_add <- setdiff(demand_vars, colnames(demand))
if (length(demand_vars_to_add) > 0) {
demand[demand_vars_to_add] <- 0
}
return( replace(demand, is.na(demand), 0) )
}
# Get the example `evmodel` and `sessions` included in the package
sessions <- evsim::california_ev_sessions %>%
filter(year(ConnectionStartDateTime) == 2018, month(ConnectionStartDateTime) == 10)
demand <- sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
test_that("demand calculation is skipped if there are no sessions", {
expect_error(
sessions %>%
mutate(Profile = "All") %>%
filter(Profile == "all") %>%
get_demand(by = "Profile", resolution = 15, dttm_seq = NULL)
)
})
